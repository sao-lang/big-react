(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-dev-runtime"] = global["jsx-dev-runtime"] || {}, global["jsx-dev-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

    /**
     * 是否支持symbol
     */
    const supportSymbol = typeof Symbol === 'function' && Symbol.for;
    /**
     * ReactElement中的$$typeof的值，使用symbol防止被滥用
     */
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7;

    /**
     * 生成ReactElement的函数
     */
    const ReactElement = (type, key, ref, props) => {
        const element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            __mark: '123'
        };
        return element;
    };
    /**
     * jsx函数
     */
    const jsx = (type, config, ...maybeChildren) => {
        let key = null;
        let ref = null;
        const props = {};
        // 遍历config，将里面的值赋值给props
        for (const prop in config) {
            const value = config[prop];
            // 处理键为key，不是undefined，就转成为字符串并赋值给变量key
            if (prop === 'key') {
                if (value !== undefined) {
                    key = '' + value;
                }
                continue;
            }
            // 处理键为ref，不是undefined，就赋值给变量ref
            if (prop === 'ref') {
                if (value !== undefined) {
                    ref = value;
                }
                continue;
            }
            // 对于其他的，如果这是config自己身上的prop，就直接赋值给props
            if ({}.hasOwnProperty.call(config, prop)) {
                props[prop] = value;
            }
        }
        // 处理maybeChildren
        const childrenLength = maybeChildren.length;
        if (childrenLength) {
            // 如果maybeChildren是单节点  child这样
            if (childrenLength === 1) {
                props.children = maybeChildren[0];
            }
            // 如果是多节点 [child, child]这样
            else {
                props.children = maybeChildren;
            }
        }
        return ReactElement(type, key, ref, props);
    };
    /**
     * 开发环境的jsx函数
     */
    const jsxDev = jsx;

    exports.jsx = jsx;
    exports.jsxDev = jsxDev;

}));
